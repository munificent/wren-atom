'scopeName': 'source.wren'
'name': 'Wren'
'fileTypes': [
  'wren'
]
'patterns': [
  {'include': '#code'}
]
'repository': {
  'code': {
    'patterns': [
      {'include': '#block-argument'}
      {'include': '#class'}
      {'include': '#comment-block'}
      {'include': '#comment-line'}
      {'include': '#constant'}
      {'include': '#keyword'}
      {'include': '#list'}
      {'include': '#string'}
      {'include': '#variable'}
      {
        'begin': '{'
        'end': '}'
        'patterns': [
          {'include': '#code'}
        ]
      }
    ]
  }
  'block-argument': {
    'begin': '[)a-zA-Z0-9_]\\s*(\\{)'
    'beginCaptures': {
      '1': {'name': 'punctuation.block-argument.wren'}
    }
    'end': '}'
    'endCaptures': {
      '0': {'name': 'punctuation.block-argument.wren'}
    }
    'patterns': [
      {
        'name': 'meta.block.parameters'
        'begin': '\\|'
        'beginCaptures': {
          '0': {'name': 'punctuation.definition.parameters.wren'}
        }
        'end': '\\|'
        'endCaptures': {
          '0': {'name': 'punctuation.definition.parameters.wren'}
        }
        'patterns': [
          {
            'name': 'variable.parameter.wren'
            'match': '\\w+'
          }
        ]
      }
      {'include': '#code'}
    ]
  }
  'class': {
    'name': 'meta.class.wren'
    'begin': '\\b(class)\\s+(\\w+)'
    'beginCaptures': {
      '1': {'name': 'storage.modifier.wren'}
      '2': {'name': 'entity.name.type.class.wren'}
    }
    'end': '(?=})'
    'endCaptures': {
      '0': {'name': 'punctuation.section.class.end.wren'}
    }
    'patterns': [
      {'include': '#comments'}
      {
        'name': 'meta.definition.class.inherited.wren'
        'begin': '\\bis\\b'
        'beginCaptures': {
          '0': {'name': 'storage.modifier.is.wren'}
        }
        'end': '(?={)'
        'patterns': [
          {'include': '#code'}
        ]
      }
      {
        'name': 'meta.class.body.wren'
        'begin': '{'
        'end': '(?=})'
        'patterns': [
          {'include': '#class-body'}
        ]
      }
    ]
  }
  'class-body': {
    'patterns': [
      {'include': '#comment-block'}
      {'include': '#comment-line'}
      {'include': '#method-foreign'}
      {'include': '#method'}
    ]
  }
  'comment-block': {
    'patterns': [
      {
        'name': 'comment.block.wren'
        'begin': '\/\\*'
        'end': '\\*\/'
        'captures': {
          '0': {'name': 'punctuation.definition.comment.wren'}
        }
        'patterns': [
          {'include': '#comment-block'}
        ]
      }
    ]
  }
  'comment-line': {
    'patterns': [
      {
        'match': '\\s*((\/\/).*$\\n?)'
        'captures': {
          '1': {'name': 'comment.line.double-slash.wren'}
          '2': {'name': 'punctuation.definition.comment.wren'}
        }
      }
    ]
  }
  'constant': {
    'patterns': [
      {
        'name': 'constant.language.wren'
        'match': '\\b(true|false|null)\\b'
      }
      {
        'name': 'variable.language.wren'
        'match': '\\b(this|super)\\b'
      }
      {
        'name': 'constant.numeric.wren'
        'match': '\\b(0x[0-9a-fA-F]*|[0-9]+(\\.[0-9]+)?(e(\\+|-)?[0-9]+)?)\\b'
      }
    ]
  }
  'keyword': {
    'patterns': [
      {
        'name': 'keyword.control.wren'
        'match': '\\b(break|else|for|if|import|in|return|while|var)\\b'
      }
      {
        'name': 'keyword.operator.logical.wren'
        'match': '(!|&&|\\|\\|)'
      }
      {
        'name': 'keyword.control.wren'
        'match': '\\?|:'
      }
      {
        'name': 'keyword.operator.wren'
        'match': '\\b(is)\\b'
      }
      {
        'name': 'keyword.operator.comparison.wren'
        'match': '==|!=|<=|>=|<|>'
      }
      {
        'name': 'keyword.operator.assignment.wren'
        'match': '='
      }
      {
        'name': 'keyword.operator.arithmetic.wren'
        'match': '\\-|\\+|\\*|\\\/|%'
      }
      {
        'name': 'keyword.operator.bitwise.wren'
        'match': '~|<<|>>|\\^'
      }
      {
        'name': 'keyword.operator.range.wren'
        'match': '\\.\\.\\.?'
      }
      {
        'name': 'keyword.operator.dereference.wren'
        'match': '(?<=\\S)\\.(?=\\S)'
      }
    ]
  }
  'list': {
    'patterns': [
      {
        'name': 'storage.type.object.list.wren'
        'begin': '\\['
        'beginCaptures': {
          '0': {'name': 'punctuation.definition.array.wren'}
        }
        'end': '\\]'
        'endCaptures': {
          '0': {'name': 'punctuation.definition.array.wren'}
        }
        'patterns': [
          {'include': '#code'}
        ]
      }
    ]
  }
  'method': {
    'name': 'meta.method.wren'
    'begin': '(\\b(construct|static)\\s+)?(\\w+\\s*=|\\w+|\\+|-|\\*|\/|%|<=?|>=?|==|!=?|&|\\||~)'
    'beginCaptures': {
      '1': {'name': 'storage.modifier.wren'}
      '2': {'name': 'entity.name.function.wren'}
    }
    'end': '}'
    'patterns': [
      {
        'name': 'meta.method.identifier.wren'
        'begin': '\\('
        'end': '\\)'
        'patterns': [
          {
            'name': 'variable.parameter.wren'
            'match': '\\w+'
          }
        ]
      }
      {
        'name': 'meta.method.body.wren'
        'begin': '{'
        'end': '(?=})'
        'patterns': [
          {'include': '#code'}
        ]
      }
    ]
  }
  'method-foreign': {
    'name': 'meta.method.wren'
    'begin': '(\\bforeign)\\s+(\\b(construct|static)\\s+)?(\\w+\\s*=|\\w+|\\+|-|\\*|\/|%|<=?|>=?|==|!=?|&|\\||~)'
    'beginCaptures': {
      '1': {'name': 'storage.modifier.wren'}
      '2': {'name': 'storage.modifier.wren'}
      '3': {'name': 'entity.name.function.wren'}
    }
    'end': '\\n'
    'patterns': [
      {
        'name': 'meta.method.identifier.wren'
        'begin': '\\('
        'end': '\\)'
        'patterns': [
          {
            'name': 'variable.parameter.wren'
            'match': '\\w+'
          }
        ]
      }
    ]
  }
  'string': {
    'patterns': [
      {
        'name': 'string.quoted.double.wren'
        'begin': '\"'
        'beginCaptures': {
          '0': {'name': 'punctuation.definition.string.begin.wren'}
        }
        'end': '\"'
        'endCaptures': {
          '0': {'name': 'punctuation.definition.string.end.wren'}
        }
        'patterns': [
          {
            'name': 'constant.character.escape.wren'
            'match': '(\\\\x\\h\\h|\\\\u\\h\\h\\h\\h|\\\\[0\"\\\\abfnrtv])'
          }
        ]
      }
    ]
  }
  'variable': {
    'patterns': [
      {
        'match': '\\b[A-Z]\\w*'
        'name': 'variable.other.global.wren'
      }
      {
        'match': '\\b__\\w*'
        'name': 'variable.other.class.wren'
      }
      {
        'match': '\\b_\\w*'
        'name': 'variable.other.instance.wren'
      }
    ]
  }
}
